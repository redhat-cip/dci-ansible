---
- hosts: localhost
  tasks:
    - name: schedule a job
      dci_job:
        topic: OSP12
        url: http://my.url
        name: "my job name"
        configuration: "my conf"
      register: job_info

    - name: Set global variables
      set_fact:
        job_id: '{{ hostvars.localhost.job_info.job.id  }}'
        topic_id: '{{ hostvars.localhost.job_info.job.topic_id  }}'
        team_id: '{{ hostvars.localhost.job_info.job.team_id  }}'
        components: '{{ hostvars.localhost.job_info.job.components  }}'
        job_url: '{{ hostvars.localhost.job_info.job.url }}'
        job_name: '{{ hostvars.localhost.job_info.job.name  }}'
        job_conf: '{{ hostvars.localhost.job_info.job.configuration  }}'

    - name: Create new component
      dci_component:
        type: my-component
        display_name: "My Component 2023-06-05"
        version: "2023-06-05"
        topic_id: '{{ topic_id }}'
        team_id: '{{ team_id }}'
      register: comp

    - name: Attach a component
      dci_job_component:
        job_id: "{{ job_id }}"
        component_id: "{{ comp.component.id }}"

    - name: Remove a component
      dci_job_component:
        job_id: "{{ job_id }}"
        component_id: "{{ comp.component.id }}"
        state: absent

    - name: Remove a component (second time)
      dci_job_component:
        job_id: "{{ job_id }}"
        component_id: "{{ comp.component.id }}"
        state: absent

- hosts: localhost
  vars:
    dci_status: running
  tasks:
    - name: echo runnning
      command: echo "running"

- hosts: localhost
  vars:
    dci_status: post-run
  tasks:
    - name: Attach result to job
      dci_file:
        job_id: '{{ job_id }}'
        path: "{{ lookup('env', 'PWD')  }}/data/content"
        name: job-test-result

- hosts: localhost
  vars:
    dci_status: success
  tasks:
    - name: echo success
      command: echo "success"


- hosts: localhost
  tasks:
    - name: Ensure job_id has proper file and jobstates attached to it
      dci_job:
        id: '{{ job_id }}'
        embed: files,jobstates
      register: job_info

    # - name: Verify that job the right number of files attached
      # assert:
        # only job-test-result is a job's file
        # that: job_info.job.files|length == 16

    - debug:
        var: job_info.job.jobstates

    - name: Check the jobstates are all created
      assert:
        # 4 = number of previous jobstates in the previous play
        that: job_info.job.jobstates|length == 4

    - name: And the jobstates.status are set (1/4)
      assert:
        that: job_info.job.jobstates[0].status == "new"

    - name: And the jobstates.status are set (2/4)
      assert:
        that: job_info.job.jobstates[1].status == "running"

    - name: And the jobstates.status are set (3/4)
      assert:
        that: job_info.job.jobstates[2].status == "post-run"

    - name: And the jobstates.status are set (4/4)
      assert:
        that: job_info.job.jobstates[3].status == "success"

- hosts: localhost
  tasks:
    - name: Request an update job
      dci_job:
        id: '{{ job_id }}'
        update: True
      register: job_info

    - name: Show up some message
      debug:
        msg: some message

    - name: Verify that update previous job id is correctly set
      assert:
        that:
          - job_info.job.update_previous_job_id == '{{ job_id }}'
          - job_info.job.id is defined

- hosts: localhost
  tasks:
    - name: Request an upgrade job
      dci_job:
        id: '{{ job_id }}'
        upgrade: True
      register: job_info

    - name: Ensure job_id has proper files attached to it
      dci_job:
        id: '{{ hostvars.localhost.job_info.job.id  }}'
        embed: files,jobstates
      register: job_info

    - debug:
        var: job_info.job.files

    # - name: Verify that job has just 1 file attached to it
    #  assert:
    #    that: job_info.job.files|length == 1

    - name: Request a refresh keys
      dci_keys:
        remoteci_id: "{{ lookup('env', 'DCI_CLIENT_ID') | regex_replace('^.*/(.*)$', '\\1') }}"
      register: keys

    - name: Verify that keys are well setup
      assert:
        that: keys.key is defined


- hosts: localhost
  tasks:
    - name: Set the tags
      dci_job:
        id: '{{ job_id }}'
        tags:
          - foo
          - queens
          - je-sais-pas-moi
      register: job_info

    - debug:
        var: job_info.job.tags

    - name: Verify that job has 3 tags
      assert:
        that: job_info.job.tags|length == 3


- name: Test warning messages
  hosts: localhost
  tasks:
    - name: Single item OK warning
      shell: dnf --version

    - name: Loop item OK warning
      shell: |
          sed -e 's/foo/{{ item }}/g' << _EOF_
          foo
          _EOF_
      loop:
        - bar
        - car
        - zar

    - block:
        - name: Single item KO warning
          shell: rm /tmp/does.not.exist
      rescue:
        - debug:
            msg: Single item KO warning failed as expected

    - block:
        - name: Loop item KO warning
          shell: "curl -I {{ item }}"
          loop:
            - https://redhat.com
            - https://does.no.exist
            - https://docs.openshift.com
      rescue:
        - debug:
            msg: Loop item KO warning failed as expected

    - block:
        - name: Deprecated warning
          openssl_certificate:
            key_usage_strict: no
      rescue:
        - debug:
            msg: Deprecated warning failed as intended

    - name: Loop item skipped
      debug:
        msg: "Test item: {{ item }}"
      when: item == 3
      loop: [1, 2, 3, 4, 5]

    - name: Checking task files
      shell: "dcictl file-list {{ job_id }}"
      register: dcictl_file_list

    - name: Assert single item OK warning
      assert:
        that: '"warn/TASK [Single item OK warning]" in dcictl_file_list.stdout'

    - name: Assert loop item OK warning
      assert:
        that: '"warn/TASK [Loop item OK warning]" in dcictl_file_list.stdout'

    - name: Assert single item KO warning
      assert:
        that: '"failed/warn/TASK [Single item KO warning]" in dcictl_file_list.stdout'

    - name: Assert loop item KO warning
      assert:
        that: '"failed/warn/TASK [Loop item KO warning]" in dcictl_file_list.stdout'

    - name: Assert deprecated warning
      assert:
        that: '"failed/warn/TASK [Deprecated warning]" in dcictl_file_list.stdout'

    - name: Assert loop item skipped
      assert:
        that:
          - '"TASK [Loop item skipped]" in dcictl_file_list.stdout'
          - '"skipped/TASK [Loop item skipped]" not in dcictl_file_list.stdout'
